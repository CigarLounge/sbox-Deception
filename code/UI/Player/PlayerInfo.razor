@using System;

@namespace Murder.UI

@if (!Hud.DisplayedPlayer.IsAlive() || Hud.DisplayedPlayer.Role is Role.None)
{
    return;
}

<root class="text-shadow">
    <div style="flex-direction: column;">
        <text class="name" style="color: @Hud.DisplayedPlayer.Color.Hex" text=@Hud.DisplayedPlayer.BystanderName/>
        <text class="role" style="color: @Hud.DisplayedPlayer.Role.GetColor().Hex" text=@Hud.DisplayedPlayer.Role.GetTitle()/>
    </div>
    <div>
        <div class="clue-icon">search</div>
        <div>
            @for (var i = 0; i < 5; ++i) 
            {
                <div class="segment rounded" style="background-color: @(i < Hud.DisplayedPlayer.CluesCollected % 5 ? @Hud.DisplayedPlayer.Role.GetColor().Hex : "#00000066")"></div>
            }
        </div>
    </div>
</root>

@code 
{
    protected override int BuildHash()
    {
        var player = Hud.DisplayedPlayer;
        return HashCode.Combine(player.IsAlive(), player.BystanderName?.GetHashCode(), player.Role.GetHashCode(), player.Health, player.CluesCollected);
    }
}

<style>
    PlayerInfo {
        position: absolute;
        bottom: 50px;
        left: 25px;
        flex-direction: column;

        .name {
            font-size: 60px;
            font-weight: 500;
            top: 10px;
        }

        .role {
            font-size: 30px;
            top: -10px;
        }

        .health-icon {
            font-family: MaterialIcons;
            font-size: 60px;
            top: -4px;
        }

        .clue-icon {
            font-family: MaterialIcons;
            font-size: 60px;
            top: -4px;
        }

        .segment {
            width: 26px;
            height: 48px;
            background-color: #00000066;
            margin-right: 4px;
            box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.5);
        }
    }
</style>