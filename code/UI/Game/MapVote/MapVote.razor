@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;

@namespace Murder.UI

@attribute [StyleSheet("UI/Game/MapVote/MapVote.scss")]

<root class="fullscreen-dark-background">
	<div class="inner text-shadow">
		<div class="header">
			<div class="left">
				<text class="title">#MapVote.Title</text>
				<text class="subtitle">#MapVote.Subtitle</text>
			</div>
			<div class="right">
				<text class="countdown">@GameState.Current.TimeLeftFormatted</text>
			</div>
		</div>
		<div @ref="Maps" class="body">
			@foreach (var map in Murder.GameManager.Instance.MapVoteIdents)
			{
				<MapIcon Ident=@map />
			}
		</div>
	</div>
</root>

@code
{
	private Panel Maps { get; set; }

	public MapVote()
	{
		// Delete unneeded UI elements.
		foreach (var panel in Game.RootPanel.Children.ToList())
		{
			if (panel is not TextChat and not VoiceChat)
				panel.Enabled(false);
		}
	}

	public override void Tick()
	{
		if (GameState.Current is not MapSelectionState mapSelectionState)
			return;

		// We are looping quite a lot in this code. Maybe we can use razor to make this less painful?
		var maps = Maps.ChildrenOfType<MapIcon>();

		foreach (var icon in maps)
			icon.Votes = 0;

		foreach (var group in mapSelectionState.Votes.GroupBy(x => x.Value).OrderByDescending(x => x.Count()))
		{
			foreach (var map in maps)
			{
				if (group.Key == map.Ident)
					map.Votes = group.Count();
			}
		}
	}

	protected override int BuildHash() => HashCode.Combine(GameState.Current.TimeLeftFormatted);
}