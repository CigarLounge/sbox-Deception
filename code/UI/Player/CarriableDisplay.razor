@using Murder;
@using Sandbox;
@using System;

@namespace Murder.UI

@if (!UI.Hud.DisplayedPlayer.Carriable.IsValid() || UI.Hud.DisplayedPlayer.Role == Role.None)
{
    return;
}

<root class="text-shadow">
    <div class="slot @(UI.Hud.DisplayedPlayer.IsHolstered ? "inactive" : "")">
        <div class="bar rounded">
            <img class="icon" src="@UI.Hud.DisplayedPlayer.Carriable.IconPath" />
        </div>
        <inputglyph button="Slot1" style="light" style="margin-left: 5px;" />
    </div>
</root>

@code {
    protected override int BuildHash()
    {
        return HashCode.Combine(UI.Hud.DisplayedPlayer.Carriable.IsValid(), UI.Hud.DisplayedPlayer.IsHolstered, UI.Hud.DisplayedPlayer.Role.GetHashCode());
    }
}

<style>
    CarriableDisplay {
        position: absolute;
        bottom: 50px;
        right: 25px;
        flex-direction: column;
        align-items: flex-end;

        .slot {
            transition: all 0.15s ease-out;
            align-items: center;

            .bar {
                height: 80px;
                align-items: center;
                justify-content: center;

                .icon {
                    height: 145px;
                    width: 145px;
                }
            }
            
            &.inactive {
                opacity: 0.5;
            }

            &:intro {
                right: -25px;
            }
        }
    }
</style>