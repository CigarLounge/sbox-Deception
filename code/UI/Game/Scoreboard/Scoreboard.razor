@using Sandbox;
@using System;
@using System.Collections.Generic;

@namespace Murder.UI

<root class="@(Input.Down(InputButton.Score) ? "show" : "")">
	<div class="container rounded background-color-primary">
		<ScoreboardInfo />
		<div class="groups">
			<ScoreboardGroup />
			@foreach (var client in Game.Clients)
			{
				<ScoreboardEntry Client=@client />
			}
		</div>
	</div>
	<div style="width: 45%;">
		<button class="spectate-button text-shadow" @onclick=@ToggleSpectating icon=@(Spectating.IsForced ? "videocam_off" : "videocam")>
			@(Spectating.IsForced ? "Disable Forced Spectating" : "Enable Forced Spectating")
		</button>
	</div>
</root>

@code
{
	private void ToggleSpectating()
	{
		Spectating.IsForced = !Spectating.IsForced;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Input.Down(InputButton.Score), Spectating.IsForced, Game.Clients.HashCombine(c => HashCode.Combine(c.SteamId)));
	}
}

<style>
	Scoreboard 
	{
		pointer-events: all;
		width: 100%;
		height: 100%;
		opacity: 0;
		z-index: 1;
		justify-content: center;
		align-items: center;
		flex-direction: column;

		&.show {
			opacity: 0.98;
		}

		.container 
		{
			flex-direction: column;
			max-height: 70%;
			width: 45%;
			backdrop-filter-blur: 20px;

			.groups 
			{
				flex-direction: column;
				padding: 8 8 12 8;
				overflow: scroll;
			}
		}

		.spectate-button
		{
			align-items: center;
			margin: 2px 5px;
			transition: all 0.1s ease;

			label
			{
				font-size: 16px;
			}

			iconpanel
			{
				font-size: 20px;
				margin-right: 3px;
			}

			&:hover
			{
				color: #dfdfdf;
				cursor: pointer;
				transform: scale(1.01);
			}

			&:active
			{
				color: #c4c4c4;
				transform: scale(1);
			}
		}
	}
</style>