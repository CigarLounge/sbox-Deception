@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Threading.Tasks;

@namespace Murder.UI

@attribute [StyleSheet("UI/Game/MapVote/MapIcon.scss")]

@if (_data is null)
{
	return;
}

<root>
	<div class="container rounded @(!string.IsNullOrEmpty(_data.Thumb) ? "thumb" : "")" @onclick=@VoteMap>
		<div class="info">
			@if (!string.IsNullOrEmpty(_data.Org.Thumb))
			{
				<div class="orgavatar text-shadow rounded" style="background-image: url(@_data.Org.Thumb)" />
			}
			<div style="flex-direction: column;">
				<text class="title text-shadow">@_data.Title</text>
				<text class="orgname text-shadow">@_data.Org.Title</text>
			</div>
		</div>
		<text class="votes rounded text-shadow">
			<text>@Votes</text>
		</text>
	</div>
</root>

@code
{
	public string Ident { get; set; }
	public int Votes { get; set; }

	private Package _data;

	protected void VoteMap() => MapSelectionState.SetVote(Ident);

	protected override async Task OnParametersSetAsync()
	{
		_data = await Package.Fetch(Ident, true);

		if (_data?.PackageType != Package.Type.Map)
		{
			Delete();
			return;
		}

		StateHasChanged();
	}

	protected override int BuildHash() => HashCode.Combine(Votes);
}