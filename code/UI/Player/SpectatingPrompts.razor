@using System;
@using Sandbox;
@using Murder;

@namespace Murder.UI

@if (Game.LocalPawn is not Murder.Player player || player.IsAlive())
{
	return;
}

<root>
	<div class="text-shadow" style="align-items: center; flex-direction: column;">
		@if (Spectating.Player.IsValid())
		{
			<div class="swap-panel">
				<div style="align-items: center;">
					<text>Press</text>
					<inputglyph button="PrimaryAttack" />
					<text>or</text>
					<inputglyph button="SecondaryAttack" />
					<text>to swap active player</text>
				</div>
			</div>
		}

        @if (Murder.GameManager.Instance.State is WaitingState state && !state.HasMinimumPlayers )
        {
            <text><text style="font-size: 45px;">Waiting for players...</text></text>
        }

		<div style="align-items: center;">
			<text>Press</text>
			<inputglyph button="Jump" />
			<text>to change spectating camera mode</text>
		</div>
	</div>
</root>

@code
{
	protected override int BuildHash()
	{
		return HashCode.Combine(Hud.DisplayedPlayer.Client.SteamId, Hud.DisplayedPlayer.IsAlive(), (GameState.Current as WaitingState)?.HasMinimumPlayers);
	}
}

<style>
	SpectatingPrompts {
		position: absolute;
		left: 50%;
		bottom: 50px;
		transform: translateX(-50%);
		flex-direction: column;
		font-size: 17px;
		font-weight: 500;
		align-items: center;

		.name {
		    font-size: 30px;
		    font-weight: 600;
        }

        .swap-panel {
            align-items: center;
            flex-direction: column;
        }

        inputglyph {
            margin: 5px;
        }
	}
</style>