@using Sandbox;
@using Sandbox.UI;
@using System;

@namespace Murder.UI

@attribute [StyleSheet("UI/Player/SpectatingPrompts.scss")]

@if (Game.LocalPawn is not Murder.Player player || player.IsAlive())
{
	return;
}

<root>
	<div class="text-shadow" style="align-items: center; flex-direction: column;">
		@if (Spectating.Player.IsValid())
		{
			<div class="swap-panel">
				<div style="align-items: center;">
					<text>Press</text>
					<inputglyph button="PrimaryAttack" />
					<text>or</text>
					<inputglyph button="SecondaryAttack" />
					<text>to swap active player</text>
				</div>
			</div>
		}

		@if (Murder.GameManager.Instance.State is WaitingState state && !state.HasMinimumPlayers)
		{
			<text><text style="font-size: 45px;">Waiting for players...</text></text>
		}

		<div style="align-items: center;">
			<text>Press</text>
			<inputglyph button="Jump" />
			<text>to change spectating camera mode</text>
		</div>
	</div>
</root>

@code
{
	protected override int BuildHash()
	{
		return HashCode.Combine(Hud.DisplayedPlayer.Client.SteamId, Hud.DisplayedPlayer.IsAlive(), (GameState.Current as WaitingState)?.HasMinimumPlayers);
	}
}